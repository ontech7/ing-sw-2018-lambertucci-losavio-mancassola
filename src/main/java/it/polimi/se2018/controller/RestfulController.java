package it.polimi.se2018.controller;

import it.polimi.se2018.controller.services.ErrorService;
import it.polimi.se2018.controller.services.MatchesService;
import it.polimi.se2018.model.*;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

@RestController
public class RestfulController implements ErrorController {
    public static Map<String, Match> matches = new HashMap<>();

    /* Error mapping */

    @RequestMapping("/error")
    @ResponseBody
    public ErrorService handleError(HttpServletRequest request) {
        Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");
        Exception exception = (Exception) request.getAttribute("javax.servlet.error.exception");
        String message = "Resource not found.";
        if(exception != null) {
            message = exception.getMessage();
        }
        return new ErrorService(statusCode, message);
    }

    @Override
    public String getErrorPath() {
        return "/error";
    }

    /* Root redirect */

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public ModelAndView method() {
        return new ModelAndView("redirect:rest/api");
    }

    /* REST API DOC */

    @RequestMapping(value = "/rest/api", method = RequestMethod.GET)
    @ResponseBody
    public String doGetRestApi() {
        String body = "<h1>Sagrada REST API Documentation</h1>";
        body += "<p><u>/rest/api/matches</u> -> All matches ongoing</p>";
        body += "<p><u>/rest/api/matches/{uuid}</u> -> A specified match by UUID generated by the Server</p>";
        body += "<p><u>/rest/api/matches/{uuid}/players</u> -> Show all players of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/players/{id}</u> -> Show one player of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/players/{id}/board</u> -> Show one player's board of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/playerqueue</u> -> Show the player queue of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/playerqueue/{id}</u> -> Show a specified player of the player queue of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/draftpool</u> -> Show the draftpool of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/roundtracker</u> -> Show the roundtracker of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/toolcards</u> -> Show all toolcards of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/toolcards/{id}</u> -> Show a specified tool card of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/publicobjcards</u> -> Show all public objective cards of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/publicobjcards/{id}</u> -> Show a specified public objective card of a specified match</p>";
        body += "<p><u>/rest/api/matches/{uuid}/finished</u> -> Show if a certain match is finished</p>";

        return body;
    }

    /* Matches */

    @RequestMapping(value = "/rest/api/matches", method = RequestMethod.GET)
    public MatchesService doGetMatches() {

        return new MatchesService(this.matches);
    }

    /* Matches */

    @RequestMapping(value = "/rest/api/matches/{uuid}", method = RequestMethod.GET)
    public Match doGetMatch(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid);
    }

    /* Match -> Players */

    @RequestMapping(value = "/rest/api/matches/{uuid}/players", method = RequestMethod.GET)
    public List<Player> doGetPlayers(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getPlayers();
    }

    @RequestMapping(value = "/rest/api/matches/{uuid}/players/{id}", method = RequestMethod.GET)
    public Player doGetPlayerById(@PathVariable String uuid, @PathVariable int id) {

        return doGetMatches().getMatches().get(uuid).getPlayers().get(id);
    }

    @RequestMapping(value = "/rest/api/matches/{uuid}/players/{id}/board", method = RequestMethod.GET)
    public Board doGetPlayerBoard(@PathVariable String uuid, @PathVariable int id) {

        return doGetMatches().getMatches().get(uuid).getPlayers().get(id).getBoard();
    }

    /* Match -> PlayerQueue */

    @RequestMapping(value = "/rest/api/matches/{uuid}/playerqueue", method = RequestMethod.GET)
    public Queue<Player> doGetPlayerQueue(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getPlayerQueue();
    }

    @RequestMapping(value = "/rest/api/matches/{uuid}/playerqueue/{id}", method = RequestMethod.GET)
    public Player[] doGetPlayerQueue(@PathVariable String uuid, @PathVariable int id) {

        return (Player[])doGetMatches().getMatches().get(uuid).getPlayerQueue().toArray()[id];
    }

    /* Match -> DraftPool */

    @RequestMapping(value = "/rest/api/matches/{uuid}/draftpool", method = RequestMethod.GET)
    public DiceContainer doGetDraftPool(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getDraftPool();
    }

    /* Match -> RoundTracker */

    @RequestMapping(value = "/rest/api/matches/{uuid}/roundtracker", method = RequestMethod.GET)
    public DiceContainer doGetRoundTracker(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getRoundTracker();
    }

    /* Match -> ToolCards */

    @RequestMapping(value = "/rest/api/matches/{uuid}/toolcards", method = RequestMethod.GET)
    public ToolCard[] doGetToolCards(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getToolCards();
    }

    @RequestMapping(value = "/rest/api/matches/{uuid}/toolcards/{id}", method = RequestMethod.GET)
    public ToolCard doGetToolCards(@PathVariable String uuid, @PathVariable int id) {

        return doGetMatches().getMatches().get(uuid).getToolCards()[id];
    }

    /* Match -> PublicObjCards */

    @RequestMapping(value = "/rest/api/matches/{uuid}/publicobjcards", method = RequestMethod.GET)
    public PublicObjCard[] doGetPublicObjCards(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).getPublicObjCards();
    }

    @RequestMapping(value = "/rest/api/matches/{uuid}/publicobjcards/{id}", method = RequestMethod.GET)
    public PublicObjCard doGetPublicObjCardById(@PathVariable String uuid, @PathVariable int id) {

        return doGetMatches().getMatches().get(uuid).getPublicObjCards()[id];
    }

    /* Match -> Finished */

    @RequestMapping(value = "/rest/api/matches/{uuid}/finished", method = RequestMethod.GET)
    public Boolean doGetFinishedMatch(@PathVariable String uuid) {

        return doGetMatches().getMatches().get(uuid).isFinished();
    }
}
